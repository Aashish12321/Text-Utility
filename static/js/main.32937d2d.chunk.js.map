{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","_jsx","className","concat","mode","children","_jsxs","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","_Fragment","style","color","heading","value","onChange","event","target","backgroundColor","newText","trim","replace","toUpperCase","toLowerCase","split","i","length","charAt","slice","join","App","setMode","about","document","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.32937d2d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/\">{props.about}</a>\r\n              </li> */}\r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    </nav> \r\n  )\r\n}\r\n\r\n// \"homepage\" : \"https://Aashish12321.github.io/text-utility\",\r\n// \r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () =>{\r\n        // console.log(\"Uppercase was clicked \" + text);\r\n        let trimmedText = text.trim().replace(/\\s+/g, ' ');           // Removes leading/trailing whitespace and extra spaces between words.\r\n        let newText = trimmedText.toUpperCase();\r\n        setText(newText);                                               // Changes/set the value of \"text\" state variable with newText.\r\n    }\r\n\r\n    const handleLowClick = () =>{\r\n        let trimmedText = text.trim().replace(/\\s+/g, ' ');           \r\n        let newText = trimmedText.toLowerCase();\r\n        setText(newText); \r\n    }\r\n\r\n    const handleClearClick = () =>{\r\n        setText(\"\"); \r\n    }\r\n\r\n    const handleCapClick = () =>{\r\n        let trimmedText = text.trim().replace(/\\s+/g, ' ');           \r\n        let newText = trimmedText.split(\". \");\r\n        for (let i = 0; i < newText.length; i++) {\r\n            newText[i] = newText[i].charAt(0).toUpperCase() + newText[i].slice(1);\r\n        }\r\n        setText(newText.join(\". \")); \r\n    }\r\n\r\n    const handleOnChange = (event) =>{\r\n        // console.log(\"OnChange\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text, setText] = useState('Enter text here');\r\n\r\n    return (\r\n        <>\r\n            <div className='container my-3' style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n                <h3>{props.heading}</h3>\r\n                <div className=\"my-3\"> \r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}}></textarea>\r\n                </div>\r\n                <button type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n                <button type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n                <button type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleCapClick}>Capitalize</button>\r\n            </div>\r\n            <div className='container my-3' style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n                <h6>Note:- Use a fullstop followed by a single space after end of each sentence.</h6>\r\n                <h2>Your text summary: </h2>\r\n                <h5>Words: {text.split(\" \").length}</h5>\r\n                <h5>Characters: {text.length}</h5>\r\n            </div>\r\n        </>\r\n  )\r\n}\r\n","import { useState } from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\n\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n    }\n  }\n\n  return (\n    <>\n      <Navbar title=\"TextUtils\" about=\"About\" mode={mode} toggleMode={toggleMode}/>\n      <div className=\"container my-3\" >\n        <TextForm heading=\"Enter text to analyze\" mode={mode} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}